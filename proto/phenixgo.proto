syntax = "proto3";

package phenixgo;
option go_package = "./;proto";

import "generic.proto";
import "model.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

/**
 * PhenixGO GRPC functions
 */
service PhenixGO {
  // StartUserStrategy function for initiate a strategy.
  rpc StartUserStrategy (StartUserStrategyRequest) returns (StartUserStrategyResponse) {}
  // UpdateUserStrategy function for updating a running strategy.
  rpc UpdateUserStrategy (UpdateUserStrategyRequest) returns (UpdateUserStrategyResponse) {}
  // StopUserStrategy function for stopping a running strategy.
  rpc StopUserStrategy (StopUserStrategyRequest) returns (StopUserStrategyResponse) {}
  // GetUserStrategy function for stopping a running strategy.
  rpc GetUserStrategy (GetStrategyRequest) returns (GetStrategyResponse) {}
  // GetStrategyProfits function for retrieving strategy profit history.
  rpc GetStrategyProfits (GetStrategyProfitsRequest) returns (GetStrategyProfitsResponse) {}
  // GetStrategyState function for retrieving current strategy state.
  rpc GetStrategyState (GetStrategyStateRequest) returns (GetStrategyStateResponse) {}
}

/* StartUserStrategyRequest represents request for starting a strategy. */
message StartUserStrategyRequest {
  string strategy_name = 1; // strategy name.
  google.protobuf.Any parameter = 2; // strategy parameters. (ex. LendingParameter)
  google.protobuf.StringValue tag = 3; // strategy tag for classfying.
  model.ExchangeAPIKey apikey1 = 4; // first exchange api key. (for all strategy)
  model.ExchangeAPIKey apikey2 = 5; // second exchange api key. (for cross exchange strategy. ex: Bitgin Arbitrage)
}

/* StartUserStrategyResponse returns created strategy information. */
message StartUserStrategyResponse {
  model.Strategy strategy = 1; // strategy data.
}

/* UpdateUserStrategyRequest represents request for updating a strategy. */
message UpdateUserStrategyRequest {
 string strategy_id = 1; // specified target strategy id.
 google.protobuf.Any parameter = 2; // specified update parameters.
}

/* UpdateUserStrategyResponse returns strategy id if update successfully. */
message UpdateUserStrategyResponse {
  string strategy_id = 1; // updated strategy id.
}

/* StopUserStrategyRequest represents request for stopping a strategy. */
message StopUserStrategyRequest {
  string strategy_id = 1; // specified target strategy id.
  bool is_force = 2;
}

/* StopUserStrategyResponse returns strategy id if stop successfully. */
message StopUserStrategyResponse {
  string strategy_id = 1; // stopping strategy id.
}

/* StrategyFilter represents a search query, with options strategy_id, strategy_name  and tag to indicate which results to include in the responose. */
message StrategyFilter {
  google.protobuf.StringValue strategy_id = 1; // strategy_id.
  google.protobuf.StringValue strategy_name = 2; // strategy_name.
  google.protobuf.StringValue tag = 3; // tag for classify.
  repeated google.protobuf.StringValue status = 4;
}

/* GetStrategyRequest represents a search query, with options StrategyFilter and Pagination to indicate which results to include in the response. */
message GetStrategyRequest {
  StrategyFilter filter = 1; // condition of the request
  generic.Pagination page = 2; // range of the response
}

/* GetStrategyResponse returns strategy array for the matches query. */
message GetStrategyResponse {
  repeated model.Strategy strategies = 1; // strategy data.
}

/**
 * GetStrategyProfitsRequest represent a query, that specify time range to indicate profit data to return. */
message GetStrategyProfitsRequest {
  string strategy_id = 1; // strategy id means profit from.
  google.protobuf.Timestamp start_time = 2; // query range start.
  google.protobuf.Timestamp end_time = 3; // query range end.
}

/* GetStrategyProfitsResponse returns profit data. */
message GetStrategyProfitsResponse {
  repeated model.Profit profits = 1; // profit data.
}

message GetStrategyStateRequest {
  string strategy_id = 1;
}

message GetStrategyStateResponse {
  google.protobuf.Any state = 1; 
}